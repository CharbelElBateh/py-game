# Imports
import pygame as pg

# Easier visualization of the map instead of putting 0 or False
_ = False

# Game map
# _ is an empty space
# 1 is a wall
mini_map = [
    [1, 1, 1, 1, 1, 1, 1, 1, _, _, _, _, _, _, _, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, 1],
    [1, _, _, _, _, _, _, 1, 1, 1, 1, 1, 1, 1, 1, 1, _, _, _, _, _, _, _, _, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
    [1, _, _, _, _, _, _, 1, 1, 1, 1, 1, 1, 1, 1, 1, _, _, _, _, _, _, _, _, 1],
    [1, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, _, _, _, _, _, _, _, 1, 1, 1, 1, _, _, 1, 1, 1, 1],
    [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, 1, _, _, _],
    [_, _, _, _, _, _, _, 1, 1, 1, 1, 1, 1, 1, 1, 1, _, _, 1, _, _, 1, _, _, _],
    [_, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, 1, _, _, 1, _, _, 1, _, _, _],
    [_, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, 1, _, _, 1, _, _, 1, _, _, _],
    [_, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, 1, _, _, 1, _, _, 1, _, _, _],
    [_, _, 1, 1, 1, 1, 1, 1, _, _, _, _, _, _, _, 1, 1, 1, 1, _, _, 1, _, _, _],
    [_, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _],
    [_, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _],
    [_, _, 1, _, _, 1, 1, 1, _, _, _, _, _, _, _, 1, 1, 1, 1, 1, 1, 1, _, _, _],
    [_, _, 1, _, _, 1, _, 1, _, _, _, _, _, _, _, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2],
    [_, _, 1, _, _, 1, _, 1, _, _, _, _, _, _, _, 1, 2, _, _, _, _, _, _, _, 2],
    [_, _, 1, _, _, 1, _, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, _, _, _, _, _, _, _, 2],
    [1, 1, 1, _, _, 1, 1, 1, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 2],
    [1, _, _, _, _, _, _, 1, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 2],
    [1, _, _, _, _, _, _, 1, 1, 1, _, _, 1, 1, 1, 1, 2, _, _, _, _, _, _, _, 2],
    [1, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, 2, _, _, _, _, _, _, _, 2],
    [1, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, 2, _, _, _, _, _, _, _, 2],
    [1, _, _, _, _, _, _, 1, 1, 1, _, _, 1, 1, 1, 1, 2, _, _, _, _, _, _, _, 2],
    [1, _, _, _, _, _, _, 1, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 2],
    [1, 1, 1, 1, 1, 1, 1, 1, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 2],
    [_, _, _, _, _, _, _, _, _, 1, 1, 1, 1, 1, 1, 1, 2, _, _, _, _, _, _, _, 2],
    [_, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 2, 2, 2, 2, 2, 2, 2, 2, 2]
]

class Map: 
    def __init__(self, game):
        self.game = game
        self.mini_map = mini_map
        self.world_map = {}
        self.get_map()

    def get_map(self):
        for j, row in enumerate(self.mini_map):
            for i, value in enumerate(row):
                if value:
                    self.world_map[(i, j)] = value

    # Debugging function to view game in 2D
    
    # def draw(self):
    #     [pg.draw.rect(self.game.screen, 'darkgray', (pos[0] * 100, pos[1] * 100, 100, 10), 2)
    #     for pos in self.world_map]